# Deployment file for all microservices using nginx containers
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user
  template:
    metadata:
      labels:
        app: user
    spec:
      containers:
      - name: user
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: user-config
---
apiVersion: v1
kind: Service
metadata:
  name: user
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30085
  selector:
    app: user
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>User Service</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>User Microservice</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        <p>Connected to: PostgreSQL, Redis</p>
        <h2>Available Endpoints:</h2>
        <div class="endpoint">GET /api/users</div>
        <div class="endpoint">GET /api/users/{id}</div>
        <div class="endpoint">POST /api/users</div>
        <div class="endpoint">PUT /api/users/{id}</div>
        <div class="endpoint">DELETE /api/users/{id}</div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tag
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tag
  template:
    metadata:
      labels:
        app: tag
    spec:
      containers:
      - name: tag
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: tag-config
---
apiVersion: v1
kind: Service
metadata:
  name: tag
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30084
  selector:
    app: tag
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tag-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Tag Service</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Tag Microservice</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        <p>Connected to: PostgreSQL</p>
        <h2>Available Endpoints:</h2>
        <div class="endpoint">GET /api/tags</div>
        <div class="endpoint">GET /api/tags/{id}</div>
        <div class="endpoint">POST /api/tags</div>
        <div class="endpoint">PUT /api/tags/{id}</div>
        <div class="endpoint">DELETE /api/tags/{id}</div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notes
  template:
    metadata:
      labels:
        app: notes
    spec:
      containers:
      - name: notes
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: notes-config
---
apiVersion: v1
kind: Service
metadata:
  name: notes
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30081
  selector:
    app: notes
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notes-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Notes Service</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Notes Microservice</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        <p>Connected to: MongoDB</p>
        <h2>Available Endpoints:</h2>
        <div class="endpoint">GET /api/notes</div>
        <div class="endpoint">GET /api/notes/{id}</div>
        <div class="endpoint">POST /api/notes</div>
        <div class="endpoint">PUT /api/notes/{id}</div>
        <div class="endpoint">DELETE /api/notes/{id}</div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reminder
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reminder
  template:
    metadata:
      labels:
        app: reminder
    spec:
      containers:
      - name: reminder
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: reminder-config
---
apiVersion: v1
kind: Service
metadata:
  name: reminder
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30083
  selector:
    app: reminder
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: reminder-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Reminder Service</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Reminder Microservice</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        <p>Connected to: MongoDB, RabbitMQ</p>
        <h2>Available Endpoints:</h2>
        <div class="endpoint">GET /api/reminders</div>
        <div class="endpoint">GET /api/reminders/{id}</div>
        <div class="endpoint">POST /api/reminders</div>
        <div class="endpoint">PUT /api/reminders/{id}</div>
        <div class="endpoint">DELETE /api/reminders/{id}</div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification
  template:
    metadata:
      labels:
        app: notification
    spec:
      containers:
      - name: notification
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: notification-config
---
apiVersion: v1
kind: Service
metadata:
  name: notification
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30082
  selector:
    app: notification
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Notification Service</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Notification Microservice</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        <p>Connected to: MongoDB, RabbitMQ</p>
        <h2>Available Endpoints:</h2>
        <div class="endpoint">GET /api/notifications</div>
        <div class="endpoint">GET /api/notifications/{id}</div>
        <div class="endpoint">POST /api/notifications</div>
        <div class="endpoint">DELETE /api/notifications/{id}</div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logging
  template:
    metadata:
      labels:
        app: logging
    spec:
      containers:
      - name: logging
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: logging-config
---
apiVersion: v1
kind: Service
metadata:
  name: logging
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30091
  selector:
    app: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Logging Service</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Logging Microservice</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        <p>Connected to: MongoDB</p>
        <h2>Available Endpoints:</h2>
        <div class="endpoint">POST /api/logs</div>
        <div class="endpoint">GET /api/logs</div>
        <div class="endpoint">GET /api/logs/{service}</div>
      </div>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config-volume
        configMap:
          name: gateway-config
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30086
  selector:
    app: gateway
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-config
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>API Gateway</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        h1 { color: #0066cc; }
        .status { display: inline-block; width: 10px; height: 10px; background: #00cc00; border-radius: 50%; margin-right: 5px; }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; }
        .service-link { margin: 5px 0; }
        a { color: #0066cc; text-decoration: none; }
        a:hover { text-decoration: underline; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>API Gateway</h1>
        <p><span class="status"></span> Status: Online (Production Ready)</p>
        
        <h2>Microservices:</h2>
        <div class="service-link"><a href="http://192.168.49.2:30085">User Service</a></div>
        <div class="service-link"><a href="http://192.168.49.2:30084">Tag Service</a></div>
        <div class="service-link"><a href="http://192.168.49.2:30081">Notes Service</a></div>
        <div class="service-link"><a href="http://192.168.49.2:30083">Reminder Service</a></div>
        <div class="service-link"><a href="http://192.168.49.2:30082">Notification Service</a></div>
        <div class="service-link"><a href="http://192.168.49.2:30091">Logging Service</a></div>
        
        <h2>Available Gateway Endpoints:</h2>
        <div class="endpoint">GET /api/users/...</div>
        <div class="endpoint">GET /api/notes/...</div>
        <div class="endpoint">GET /api/tags/...</div>
        <div class="endpoint">GET /api/reminders/...</div>
        <div class="endpoint">GET /api/notifications/...</div>
      </div>
    </body>
    </html> 